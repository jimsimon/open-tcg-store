import { sqliteTable, AnySQLiteColumn, numeric, text, integer, index, real } from "drizzle-orm/sqlite-core"
  import { sql } from "drizzle-orm"

export const meta = sqliteTable("meta", {
	date: numeric(),
	version: text(),
});

export const sets = sqliteTable("sets", {
	baseSetSize: integer(),
	block: text(),
	cardsphereSetId: integer(),
	code: text({ length: 8 }).notNull(),
	isFoilOnly: numeric(),
	isForeignOnly: numeric(),
	isNonFoilOnly: numeric(),
	isOnlineOnly: numeric(),
	isPartialPreview: numeric(),
	keyruneCode: text(),
	languages: text(),
	mcmId: integer(),
	mcmIdExtras: integer(),
	mcmName: text(),
	mtgoCode: text(),
	name: text(),
	parentCode: text(),
	releaseDate: text(),
	tcgplayerGroupId: integer(),
	tokenSetCode: text(),
	totalSetSize: integer(),
	type: text(),
});

export const cards = sqliteTable("cards", {
	artist: text(),
	artistIds: text(),
	asciiName: text(),
	attractionLights: text(),
	availability: text(),
	boosterTypes: text(),
	borderColor: text(),
	cardParts: text(),
	colorIdentity: text(),
	colorIndicator: text(),
	colors: text(),
	defense: text(),
	duelDeck: text(),
	edhrecRank: integer(),
	edhrecSaltiness: real(),
	faceConvertedManaCost: real(),
	faceFlavorName: text(),
	faceManaValue: real(),
	faceName: text(),
	finishes: text(),
	flavorName: text(),
	flavorText: text(),
	frameEffects: text(),
	frameVersion: text(),
	hand: text(),
	hasAlternativeDeckLimit: numeric(),
	hasContentWarning: numeric(),
	hasFoil: numeric(),
	hasNonFoil: numeric(),
	isAlternative: numeric(),
	isFullArt: numeric(),
	isFunny: numeric(),
	isGameChanger: numeric(),
	isOnlineOnly: numeric(),
	isOversized: numeric(),
	isPromo: numeric(),
	isRebalanced: numeric(),
	isReprint: numeric(),
	isReserved: numeric(),
	isStarter: numeric(),
	isStorySpotlight: numeric(),
	isTextless: numeric(),
	isTimeshifted: numeric(),
	keywords: text(),
	language: text(),
	layout: text(),
	leadershipSkills: text(),
	life: text(),
	loyalty: text(),
	manaCost: text(),
	manaValue: real(),
	name: text(),
	number: text(),
	originalPrintings: text(),
	originalReleaseDate: text(),
	originalText: text(),
	otherFaceIds: text(),
	power: text(),
	printings: text(),
	promoTypes: text(),
	rarity: text(),
	rebalancedPrintings: text(),
	relatedCards: text(),
	securityStamp: text(),
	setCode: text(),
	side: text(),
	signature: text(),
	sourceProducts: text(),
	subsets: text(),
	subtypes: text(),
	supertypes: text(),
	text: text(),
	toughness: text(),
	type: text(),
	types: text(),
	uuid: text({ length: 36 }).notNull(),
	variations: text(),
	watermark: text(),
},
(table) => [
	index("cards_uuid").on(table.uuid),
]);

export const tokens = sqliteTable("tokens", {
	artist: text(),
	artistIds: text(),
	asciiName: text(),
	availability: text(),
	boosterTypes: text(),
	borderColor: text(),
	colorIdentity: text(),
	colors: text(),
	edhrecSaltiness: real(),
	faceName: text(),
	finishes: text(),
	flavorName: text(),
	flavorText: text(),
	frameEffects: text(),
	frameVersion: text(),
	hasFoil: numeric(),
	hasNonFoil: numeric(),
	isFullArt: numeric(),
	isFunny: numeric(),
	isOversized: numeric(),
	isPromo: numeric(),
	isReprint: numeric(),
	isTextless: numeric(),
	keywords: text(),
	language: text(),
	layout: text(),
	manaCost: text(),
	name: text(),
	number: text(),
	orientation: text(),
	originalText: text(),
	otherFaceIds: text(),
	power: text(),
	promoTypes: text(),
	relatedCards: text(),
	reverseRelated: text(),
	securityStamp: text(),
	setCode: text(),
	side: text(),
	signature: text(),
	subtypes: text(),
	supertypes: text(),
	text: text(),
	toughness: text(),
	type: text(),
	types: text(),
	uuid: text({ length: 36 }).notNull(),
	watermark: text(),
},
(table) => [
	index("tokens_uuid").on(table.uuid),
]);

export const cardIdentifiers = sqliteTable("cardIdentifiers", {
	cardKingdomEtchedId: text(),
	cardKingdomFoilId: text(),
	cardKingdomId: text(),
	cardsphereFoilId: text(),
	cardsphereId: text(),
	deckboxId: text(),
	mcmId: text(),
	mcmMetaId: text(),
	mtgArenaId: text(),
	mtgjsonFoilVersionId: text(),
	mtgjsonNonFoilVersionId: text(),
	mtgjsonV4Id: text(),
	mtgoFoilId: text(),
	mtgoId: text(),
	multiverseId: text(),
	scryfallCardBackId: text(),
	scryfallId: text(),
	scryfallIllustrationId: text(),
	scryfallOracleId: text(),
	tcgplayerEtchedProductId: text(),
	tcgplayerProductId: text(),
	uuid: text(),
},
(table) => [
	index("cardIdentifiers_uuid").on(table.uuid),
]);

export const cardLegalities = sqliteTable("cardLegalities", {
	alchemy: text(),
	brawl: text(),
	commander: text(),
	duel: text(),
	future: text(),
	gladiator: text(),
	historic: text(),
	legacy: text(),
	modern: text(),
	oathbreaker: text(),
	oldschool: text(),
	pauper: text(),
	paupercommander: text(),
	penny: text(),
	pioneer: text(),
	predh: text(),
	premodern: text(),
	standard: text(),
	standardbrawl: text(),
	timeless: text(),
	uuid: text(),
	vintage: text(),
},
(table) => [
	index("cardLegalities_uuid").on(table.uuid),
]);

export const cardRulings = sqliteTable("cardRulings", {
	date: numeric(),
	text: text(),
	uuid: text({ length: 36 }).notNull(),
},
(table) => [
	index("cardRulings_uuid").on(table.uuid),
]);

export const cardForeignData = sqliteTable("cardForeignData", {
	faceName: text(),
	flavorText: text(),
	identifiers: text(),
	language: text(),
	multiverseId: integer(),
	name: text(),
	text: text(),
	type: text(),
	uuid: text(),
},
(table) => [
	index("cardForeignData_uuid").on(table.uuid),
]);

export const cardPurchaseUrls = sqliteTable("cardPurchaseUrls", {
	cardKingdom: text(),
	cardKingdomEtched: text(),
	cardKingdomFoil: text(),
	cardmarket: text(),
	tcgplayer: text(),
	tcgplayerEtched: text(),
	uuid: text(),
},
(table) => [
	index("cardPurchaseUrls_uuid").on(table.uuid),
]);

export const tokenIdentifiers = sqliteTable("tokenIdentifiers", {
	cardKingdomEtchedId: text(),
	cardKingdomFoilId: text(),
	cardKingdomId: text(),
	cardsphereFoilId: text(),
	cardsphereId: text(),
	deckboxId: text(),
	mcmId: text(),
	mcmMetaId: text(),
	mtgArenaId: text(),
	mtgjsonFoilVersionId: text(),
	mtgjsonNonFoilVersionId: text(),
	mtgjsonV4Id: text(),
	mtgoFoilId: text(),
	mtgoId: text(),
	multiverseId: text(),
	scryfallCardBackId: text(),
	scryfallId: text(),
	scryfallIllustrationId: text(),
	scryfallOracleId: text(),
	tcgplayerEtchedProductId: text(),
	tcgplayerProductId: text(),
	uuid: text(),
},
(table) => [
	index("tokenIdentifiers_uuid").on(table.uuid),
]);

export const setTranslations = sqliteTable("setTranslations", {
	language: text(),
	setCode: text({ length: 20 }),
	translation: text(),
});

export const setBoosterContents = sqliteTable("setBoosterContents", {
	boosterIndex: integer(),
	boosterName: text({ length: 255 }),
	setCode: text({ length: 20 }),
	sheetName: text({ length: 255 }),
	sheetPicks: integer(),
});

export const setBoosterContentWeights = sqliteTable("setBoosterContentWeights", {
	boosterIndex: integer(),
	boosterName: text({ length: 255 }),
	boosterWeight: integer(),
	setCode: text({ length: 20 }),
});

export const setBoosterSheets = sqliteTable("setBoosterSheets", {
	boosterName: text({ length: 255 }),
	setCode: text({ length: 20 }),
	sheetHasBalanceColors: numeric(),
	sheetIsFoil: numeric(),
	sheetName: text({ length: 255 }),
});

export const setBoosterSheetCards = sqliteTable("setBoosterSheetCards", {
	boosterName: text({ length: 255 }),
	cardUuid: text({ length: 36 }).notNull(),
	cardWeight: integer(),
	setCode: text({ length: 20 }),
	sheetName: text({ length: 255 }),
});

