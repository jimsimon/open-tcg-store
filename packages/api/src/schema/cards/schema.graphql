type Card {
  id: String!
  name: String!
  setName: String!
  rarity: String
  text: String
  type: String
  flavorText: String
  finishes: [String!]!
  images: CardImages
  inventory: [ConditionInventories]!
}

type CardImages {
  small: String
  large: String
}

type ConditionInventories {
  type: String!
  NM: ConditionInventory!
  LP: ConditionInventory!
  MP: ConditionInventory!
  HP: ConditionInventory
  D: ConditionInventory
}

type ConditionInventory {
  quantity: Int!
  price: String!
}

type Set {
  code: String!
  name: String!
}

input SingleCardFilters {
  searchTerm: String
  setCode: String
}

input SetFilters {
  searchTerm: String
}

# extend type Mutation {}

extend type Query {
  getSingleCardInventory(game: String!, filters: SingleCardFilters): [Card!]!
  getSets(game: String!, filters: SetFilters): [Set!]!
  getCard(game: String!, cardId: String!): Card!
}
